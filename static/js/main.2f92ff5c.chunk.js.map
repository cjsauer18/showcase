{"version":3,"sources":["algorithms/bubbleSort.js","algorithms/quickSort.js","algorithms/mergeSort.js","node/SortingVisualizer.jsx","algorithms/radixSort.js","App.js","serviceWorker.js","index.js"],"names":["sortedArraysInOrder","colorSwap","a","left","right","code","swap1","valid","swap2","push","slice","arr","swap","items","leftIndex","rightIndex","quickSortMain","index","length","pivot","Math","floor","i","j","value","partition","merge","copyOfArray","from","mid","to","k","temp","x","swapped","getRandomInt","min","max","ceil","random","SortingVisualizer","state","array","handleChange","event","generateArray","parseInt","target","this","val","console","log","Array","arrayCell","setState","setTimeout","nextArray","bubbleSort","animateSort","m","high","mergeSort","maxNum","num","divisor","buckets","map","concat","apply","radixSort","quickSort","className","id","type","style","disabled","onChange","onClick","handleSort","cell","sortedStatus","key","height","width","background","margin","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f92ff5c.chunk.js","sourcesContent":["//clean up the swap methods, maybe create utility func\nlet sortedArraysInOrder = [];\n\nfunction colorSwap(a, left, right, code) {\n    var swap1 = {\n        ...a[left],\n        valid: code, //1 - code for invalid placement (to be swapped)\n    }\n    var swap2 = {\n        ...a[right],\n        valid: code, //1 - code for invalid placement (to be swapped)\n    }\n    a[right] = swap1;\n    a[left] = swap2;\n    sortedArraysInOrder.push(a.slice());\n}\n\nexport default function bubbleSort(a) {\n    sortedArraysInOrder = [];\n    var swapped;\n    do {\n        swapped = false;\n        for (var i = 0; i < a.length - 1; i++) {\n            if (a[i].value > a[i + 1].value) {\n                colorSwap(a, i, i + 1, 1);\n                colorSwap(a, i, i + 1, 2);\n                colorSwap(a, i, i + 1, 0);\n                swapped = true;\n                //swap ids back\n            }\n        }\n    } while (swapped);\n\n    return sortedArraysInOrder\n}","let sortedArraysInOrder = [];\n\n\nfunction colorSwap(arr, left, right, code) {\n    var swap1 = {\n        ...arr[left],\n        valid: code, //1 - code for invalid placement (to be swapped)\n    }\n    var swap2 = {\n        ...arr[right],\n        valid: code, //1 - code for invalid placement (to be swapped)\n    }\n    arr[right] = swap1;\n    arr[left] = swap2;\n    sortedArraysInOrder.push(arr.slice());\n}\n//could merge this function, or simplify it by doing swap 3 times, calling it in partition. \nfunction swap(items, leftIndex, rightIndex) {\n    colorSwap(items, leftIndex, rightIndex, 1);\n    colorSwap(items, leftIndex, rightIndex, 2);\n    colorSwap(items, leftIndex, rightIndex, 0);\n}\n\nfunction partition(items, left, right) {\n    var pivot = items[Math.floor((right + left) / 2)], //middle element\n        i = left, //left pointer\n        j = right; //right pointer\n    while (i <= j) {\n        while (items[i].value < pivot.value) {\n            i++;\n        }\n        while (items[j].value > pivot.value) {\n            j--;\n        }\n        if (i <= j) {\n            swap(items, i, j); //sawpping two elements\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nfunction quickSortMain(items, left, right) {\n    var index;\n    if (items.length > 1) {\n        index = partition(items, left, right); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            quickSortMain(items, left, index - 1);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            quickSortMain(items, index, right);\n        }\n    }\n    return items;\n}\nexport default function quickSort(items, left, right) {\n    sortedArraysInOrder = [];\n    quickSortMain(items, left, right);\n    return sortedArraysInOrder;\n}","//clement shows the algorihtm working in a different way, second portion of the array is static.\n//multi threading?\nlet sortedArraysInOrder = [];\n\nfunction merge(arr, copyOfArray, from, mid, to) {\n  let sortedArraysInOrder = [];\n  let k = from;\n  let i = from;\n  let j = mid + 1;\n\n  //loop until elements in right and left runs\n  while (i <= mid && j <= to) {\n    if (arr[i].value < arr[j].value) {\n      let temp = {\n        ...arr[i],\n        valid: 1,\n      };\n      copyOfArray[k] = temp;\n      sortedArraysInOrder.push(copyOfArray.slice());\n      temp = {\n        ...arr[i],\n        valid: 2,\n      };\n      copyOfArray[k] = temp;\n      sortedArraysInOrder.push(copyOfArray.slice());\n      temp = {\n        ...arr[i],\n        valid: 0,\n      };\n      copyOfArray[k] = temp;\n      sortedArraysInOrder.push(copyOfArray.slice());\n\n      // copyOfArray[k].value = arr[i].value;\n      i++;\n    } else {\n      let temp = {\n        ...arr[j],\n        valid: 1,\n      };\n      copyOfArray[k] = temp; //gotta hard copy the cells back to the copyArray(to be changed!)\n      sortedArraysInOrder.push(copyOfArray.slice());\n      temp = {\n        ...arr[j],\n        valid: 2,\n      };\n      copyOfArray[k] = temp;\n      sortedArraysInOrder.push(copyOfArray.slice());\n      temp = {\n        ...arr[j],\n        valid: 0,\n      };\n      copyOfArray[k] = temp;\n      sortedArraysInOrder.push(copyOfArray.slice());\n\n      j++;\n    }\n\n    k++;\n  }\n  //copy remaning elements of array onto copy\n  while (i < arr.length && i <= mid) {\n    const temp = {\n      ...arr[i],\n    };\n    copyOfArray[k] = temp;\n    k++;\n    i++;\n  }\n  for (var x = from; x < to + 1; ++x) {\n    let temp = {\n      ...copyOfArray[x],\n      swapped: true,\n    };\n    arr[x] = temp;\n    // sortedArraysInOrder.push(arr.slice());\n    // sortedArraysInOrder.push(arr.slice()); //main array is updating and we are logging every iteration\n    temp = {\n      ...copyOfArray[x],\n      swapped: false,\n    };\n    sortedArraysInOrder.push(arr.slice());\n\n    arr[x] = temp;\n  }\n\n  return sortedArraysInOrder;\n}\n\nexport default function mergeSort(arr) {\n  let sortedArraysInOrder = [];\n  let copyOfArray = arr.slice(); //copy array\n  let m = 1;\n  const low = 0;\n  const high = arr.length - 1;\n  while (m <= high - low) {\n    for (var i = 0; i < high; i += 2 * m) {\n      let from = i;\n      let mid = i + m - 1;\n      let to = Math.min(i + 2 * m - 1, high);\n      //every subarray change is strung together and appended to the array of arrays\n      //console.log(merge(arr, copyOfArray, from, mid, to));\n      sortedArraysInOrder.push(...merge(arr, copyOfArray, from, mid, to)); //merge(array, copyOfarray, i, i + m - 1, min(i + 2 * m -1, n-1))\n    }\n    m = m * 2;\n  }\n  return sortedArraysInOrder;\n}\n","import React, { Component } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport \"./Toolbar.css\";\nimport bubbleSort from \"../algorithms/bubbleSort.js\";\nimport quickSort from \"../algorithms/quickSort.js\";\nimport mergeSort from \"../algorithms/mergeSort.js\";\nimport radixSort from \"../algorithms/radixSort.js\";\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nclass SortingVisualizer extends Component {\n  state = { array: [] };\n  componentDidMount() {\n    this.generateArray();\n  }\n  generateArray(val = 90) {\n    console.log(val);\n    const Array = [];\n    for (let i = 0; i < val; i++) {\n      const arrayCell = {\n        value: getRandomInt(1, 500),\n        index: i,\n        valid: 0,\n      };\n      Array.push(arrayCell);\n    }\n    this.setState({ array: Array });\n  }\n  animateSort(sortedArraysInOrder) {\n    for (let i = 0; i < sortedArraysInOrder.length; ++i) {\n      setTimeout(() => {\n        const nextArray = sortedArraysInOrder[i];\n        this.setState({ array: nextArray });\n      }, 25 * i);\n    }\n  }\n  bubbleSort() {\n    const sortedArraysInOrder = bubbleSort(this.state.array.slice());\n    this.animateSort(sortedArraysInOrder);\n  }\n  mergeSort() {\n    const sortedArraysInOrder = mergeSort(this.state.array.slice());\n    console.log(sortedArraysInOrder);\n    this.animateSort(sortedArraysInOrder);\n  }\n  quickSort() {\n    const sortedArraysInOrder = quickSort(\n      this.state.array.slice(),\n      0,\n      this.state.array.length - 1\n    );\n    this.animateSort(sortedArraysInOrder);\n  }\n  radixSort() {\n    const sortedArraysInOrder = radixSort(this.state.array.slice());\n    this.animateSort(sortedArraysInOrder);\n  }\n  handleSort() {\n    if (this.state.code === 1) {\n      this.bubbleSort();\n    } else if (this.state.code === 2) {\n      this.mergeSort();\n    } else if (this.state.code === 3) {\n      this.quickSort();\n    } else if (this.state.code === 4) {\n      this.radixSort();\n    }\n  }\n  handleChange = (event) => {\n    this.generateArray(parseInt(event.target.value));\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"top-bar\">\n          <li className=\"array-size-selection\">\n            <input\n              id=\"changeSize\"\n              type=\"range\"\n              min=\"10\"\n              max=\"150\"\n              style={null}\n              disabled={null}\n              onChange={this.handleChange}\n            />\n          </li>\n          <ul className=\"algorithm-buttons\">\n            <li>\n              <button onClick={() => this.setState({ code: 1 })}>\n                Bubble Sort\n              </button>\n            </li>\n            <li>\n              <button onClick={() => this.setState({ code: 2 })}>\n                Merge Sort\n              </button>\n            </li>\n            <li>\n              <button onClick={() => this.setState({ code: 3 })}>\n                Quick Sort\n              </button>\n            </li>\n            <li>\n              <button onClick={() => this.setState({ code: 4 })}>\n                Radix Sort\n              </button>\n            </li>\n          </ul>\n          <button className=\"sort-button\" onClick={() => this.handleSort()}>\n            Sort\n          </button>\n        </div>\n        <div className=\"array-container\">\n          <div className=\"grid\">\n            {this.state.array.map((cell, id) => {\n              var sortedStatus;\n              if (cell.valid === 0) {\n                sortedStatus = \"#0466c8\";\n              } else if (cell.valid === 1) {\n                sortedStatus = \"red\";\n              } else if (cell.valid === 2) {\n                sortedStatus = \"green\";\n              }\n              return (\n                <div\n                  key={cell.id}\n                  className=\"cell\"\n                  style={{\n                    height: `${cell.value + \"px\"}`,\n                    width: \"30px\",\n                    background: `${sortedStatus}`,\n                    margin: \"3px\",\n                  }}\n                ></div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n","// function colorSwap(arr, left, right, code) {\n//   var swap1 = {\n//     ...arr[left],\n//     valid: code, //1 - code for invalid placement (to be swapped)\n//   };\n//   var swap2 = {\n//     ...arr[right],\n//     valid: code, //1 - code for invalid placement (to be swapped)\n//   };\n//   arr[right] = swap1;\n//   arr[left] = swap2;\n//   sortedArraysInOrder.push(arr.slice());\n// }\n// //could merge this function, or simplify it by doing swap 3 times, calling it in partition.\n// function swap(items, leftIndex, rightIndex) {\n//   colorSwap(items, leftIndex, rightIndex, 1);\n//   colorSwap(items, leftIndex, rightIndex, 2);\n//   colorSwap(items, leftIndex, rightIndex, 0);\n// }\n\nexport default function radixSort(arr) {\n  const sortedArraysInOrder = [];\n  let maxNum = 0;\n  for (let num of arr) {\n    if (num.value > maxNum) {\n      maxNum = num.value;\n    }\n  }\n  maxNum = maxNum * 10;\n  let divisor = 10;\n\n  while (divisor < maxNum) {\n    let buckets = [...Array(10)].map(() => []); //bucket arrays for each.\n\n    for (let num of arr) {\n      //for each number, get current digit and put it in respective bucket computed from math.floor eq.\n      buckets[Math.floor((num.value % divisor) / (divisor / 10))].push(num); //this is doing the countingSort on its own\n\n      sortedArraysInOrder.push(arr.slice());\n    }\n\n    arr = [].concat.apply([], buckets); //along with this, which is reassigning array with segments of the buckets array\n    sortedArraysInOrder.push(arr.slice());\n\n    //some weird syntax to flatten arrays basically\n    divisor *= 10;\n  }\n  //   maxNum.value = maxNum.value / 10;\n  console.log(arr);\n  return sortedArraysInOrder;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./node/SortingVisualizer.jsx\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}